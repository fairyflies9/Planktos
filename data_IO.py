'''Functions for reading and writing data

Created on Wed April 05 2017

Author: Christopher Strickland
Email: wcstrick@live.unc.edu
'''

__author__ = "Christopher Strickland"
__email__ = "wcstrick@live.unc.edu"
__copyright__ = "Copyright 2017, Christopher Strickland"

import os
import numpy as np

def read_SP_Data_From_vtk(path, simNums, strChoice, xy=False):
    '''Read scalar or vector Structured_Points data from an ascii VTK file.
    3D is not currently supported, and neither is ASPECT_RATIO.
    
    If xy is True, also return the xmesh and ymesh.'''

    filename = path + strChoice + '.' + str(simNums) + '.vtk'

    TYPE = None

    with open(filename, 'r') as fobj:
        for n,line in enumerate(fobj):
            keywords = line.split()
            if len(keywords) > 0:
                if keywords[0] == 'DATASET':
                    assert keywords[1] == 'STRUCTURED_POINTS', "Not a structured points file!"
                elif keywords[0] == 'DIMENSIONS':
                    Nx = int(keywords[1])
                    Ny = int(keywords[2])
                    Nz = int(keywords[3])
                elif keywords[0] == 'ORIGIN':
                    Ox = keywords[1]
                    Oy = keywords[2]
                    # Oz = keywords[3]
                elif keywords[0] == 'SPACING':
                    dx = keywords[1]
                    dy = keywords[2]
                    # dz = keywords[3]
                elif keywords[0] == 'VECTORS':
                    TYPE = 'VECTORS'
                elif keywords[0] == 'SCALARS':
                    TYPE = 'SCALARS'
                elif TYPE is not None:
                    try:
                        val = float(keywords[0])
                        headlen = n
                        break
                    except ValueError:
                        pass

    assert Nz == 1, "3D is not currently supported!"

    if TYPE == "SCALARS":
        e_data = np.genfromtxt(filename, skip_header=headlen, usecols=range(Nx),
                               max_rows=int(Ny))
        if xy:
            return e_data, np.arange(Nx)*dx+Ox, np.arange(Ny)*dy+Oy
        else:
            return e_data
    elif TYPE == "VECTORS":
        e_data_X = np.genfromtxt(filename, skip_header=headlen,
                                 usecols=range(3*int(Nx),3), max_rows=int(Ny))
        e_data_Y = np.genfromtxt(filename, skip_header=headlen,
                                 usecols=range(1,3*int(Nx),3), max_rows=int(Ny))
        # e_data_Z = np.genfromtxt(filename, skip_header=headlen,
        #                          usecols=range(2,3*int(Nx),3), max_rows=int(Ny))
        if xy:
            return e_data_X, e_data_Y, np.arange(Nx)*dx+Ox, np.arange(Ny)*dy+Oy
        else:
            return e_data_X, e_data_Y



def read_VisIt_Data_From_vtk(filename):
    ''' Read data from a single rectilinear_grid vtk file generated by VisIt
    with vector information.'''



def read_Eulerian_Data_From_vtk(path,simNums,strChoice,xy=False):

    analysis_path = os.getcwd()  # Stores current directory path        
        
    os.chdir(path)               # cd's into viz_IB2d folder
    
    filename = strChoice + '.' + str(simNums) + '.vtk'

    # Stores grid resolution from .vtk file
    Nx = np.genfromtxt(filename, skip_header=5, usecols=(1),max_rows=1)
    
    # Stores desired Eulerian data
    e_data = np.genfromtxt(filename, skip_header=14, 
                            usecols=range(0,int(Nx)), max_rows=int(Nx))

    if xy:
        
        # Stores Eulerian grid spacing
        dx =  np.genfromtxt(filename, skip_header=8, usecols=(1), 
                            max_rows=1)
    
        # Stores grid values (NOTE: yGrid = xGrid_Transpose)
        x = np.zeros(int(Nx))
        for i in range(1, int(Nx)):        
            x[i] = x[i-1]+dx

        os.chdir(analysis_path)     # Path to working directory

        return e_data,x,x
    
    else:

        os.chdir(analysis_path)     # Path to working directory

        return e_data

def read_Eulerian_Velocity_Field_vtk(path, simNums):

    analysis_path = os.getcwd()  # Stores current directory path        
    
    os.chdir(path)               # cd's into viz_IB2d folder
    
    filename = 'u.' + str(simNums) + '.vtk'

    # Stores grid resolution from .vtk file
    Nx = np.genfromtxt(filename, skip_header=5, usecols=(1),max_rows=1)
    
    # Stores desired Eulerian data
    e_data_X = np.genfromtxt(filename, skip_header=13,
                                usecols=range(0,3*int(Nx),3), max_rows=int(Nx))
    e_data_Y = np.genfromtxt(filename, skip_header=13,
                                usecols=range(1,3*int(Nx),3), max_rows=int(Nx))

    os.chdir(analysis_path)     # Path to working directory

    return e_data_X, e_data_Y